/**
 * Parse the edgeConfigId and token from an Edge Config Connection String.
 *
 * Edge Config Connection Strings look like this:
 * https://edge-config.vercel.com/<edgeConfigId>?token=<token>
 *
 * @param text - A potential Edge Config Connection String
 * @returns The id and token parsed from the given Connection String or null if
 * the given text was not a valid Edge Config Connection String.
 */
declare function parseConnectionString(text: string): {
    id: string;
    token: string;
} | null;

interface EmbeddedEdgeConfig {
    digest: string;
    items: Record<string, EdgeConfigValue>;
}
/**
 * An Edge Config Client.
 *
 * You can create new Edge Config clients using createClient().
 */
interface EdgeConfigClient {
    /**
     * Read a single value.
     *
     * @param key - the key to read
     * @returns the value stored under the given key, or undefined
     */
    get: <T = EdgeConfigValue>(key: string) => Promise<T | undefined>;
    /**
     * Reads multiple or all values.
     *
     * Allows you to read all or only selected keys of an Edge Config at once.
     *
     * @param keys - the keys to read
     * @returns Returns all entries when called with no arguments or only entries matching the given keys otherwise.
     */
    getAll: <T = EdgeConfigItems>(keys?: (keyof T)[]) => Promise<T>;
    /**
     * Check if a given key exists in the Edge Config.
     *
     * @param key - the key to check
     * @returns true if the given key exists in the Edge Config.
     */
    has: (key: string) => Promise<boolean>;
    /**
     * Get the digest of the Edge Config.
     *
     * The digest is a unique hash result based on the contents stored in the Edge Config.
     *
     * @returns The digest of the Edge Config.
     */
    digest: () => Promise<string>;
}
type EdgeConfigItems = Record<string, EdgeConfigValue>;
type EdgeConfigValue = string | number | boolean | null | {
    [x: string]: EdgeConfigValue;
} | EdgeConfigValue[];

/**
 * Create an Edge Config client.
 *
 * The client has multiple methods which allow you to read the Edge Config.
 *
 * If you need to programmatically write to an Edge Config, check out the [Update your Edge Config items](https://vercel.com/docs/storage/edge-config/vercel-api#update-your-edge-config-items) section.
 *
 * @param connectionString - A connection string. Usually you'd pass in `process.env.EDGE_CONFIG` here, which contains a connection string.
 * @returns An Edge Config Client instance
 */
declare function createClient(connectionString: string | undefined): EdgeConfigClient;
/**
 * Reads a single item from the default Edge Config.
 *
 * This is a convenience method which reads the default Edge Config.
 * It is conceptually similar to `createClient(process.env.EDGE_CONFIG).get()`.
 *
 * @see {@link EdgeConfigClient.get}
 * @param key - the key to read
 * @returns the value stored under the given key, or undefined
 */
declare const get: EdgeConfigClient['get'];
/**
 * Reads multiple or all values.
 *
 * This is a convenience method which reads the default Edge Config.
 * It is conceptually similar to `createClient(process.env.EDGE_CONFIG).getAll()`.
 *
 * @see {@link EdgeConfigClient.getAll}
 * @param keys - the keys to read
 * @returns the value stored under the given key, or undefined
 */
declare const getAll: EdgeConfigClient['getAll'];
/**
 * Check if a given key exists in the Edge Config.
 *
 * This is a convenience method which reads the default Edge Config.
 * It is conceptually similar to `createClient(process.env.EDGE_CONFIG).has()`.
 *
 * @see {@link EdgeConfigClient.has}
 * @param key - the key to check
 * @returns true if the given key exists in the Edge Config.
 */
declare const has: EdgeConfigClient['has'];
/**
 * Get the digest of the Edge Config.
 *
 * This is a convenience method which reads the default Edge Config.
 * It is conceptually similar to `createClient(process.env.EDGE_CONFIG).digest()`.
 *
 * @see {@link EdgeConfigClient.digest}
 * @returns The digest of the Edge Config.
 */
declare const digest: EdgeConfigClient['digest'];

export { EdgeConfigClient, EdgeConfigItems, EdgeConfigValue, EmbeddedEdgeConfig, createClient, digest, get, getAll, has, parseConnectionString };
